@page
@model Mindlift.Pages.ChatSupport.ChatbotModel
@{
    ViewData["Title"] = "Chatbot";
}

<div id="chat-container">
    <h2>Chat Support</h2>
    <div id="chat-box">
        <!-- This is the initial greeting message -->
        <div class="message bot-message">Hello! How may I help you today?</div>
    </div>
    <input type="text" id="user-input" placeholder="Type your message here..." autofocus>
    <button id="send-button">Send</button>
</div>

@section Scripts {
    <script>
        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('user-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') sendMessage();
        });

        async function sendMessage() {
            const userInput = document.getElementById('user-input').value;
            if (!userInput.trim()) return;

            // Display user's message
            displayMessage(userInput, 'user-message');
            document.getElementById('user-input').value = '';

            try {
                // Send the message to the server (OnPost handler)
                const response = await fetch('@Url.Page("/ChatSupport/Chatbot", "OnPost")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@(Request.Cookies[".AspNetCore.Antiforgery"] ?? "")' // CSRF Token
                    },
                    body: JSON.stringify({ userMessage: userInput })
                });

                if (!response.ok) throw new Error('Network response was not ok');

                // Get response from server
                const data = await response.json();
                // Display chatbot's response
                displayMessage(data.response, 'bot-message');
            } catch (error) {
                console.error('Error:', error);
                displayMessage("I'm having trouble processing your request. Please try again.", 'bot-message');
            }
        }

        function displayMessage(message, className) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${className}`;
            messageElement.textContent = message;
            document.getElementById('chat-box').appendChild(messageElement);
            document.getElementById('chat-box').scrollTop = document.getElementById('chat-box').scrollHeight;
        }
    </script>
}

<style>
    /* Chat container styling */
    #chat-container {
        width: 100%;
        max-width: 500px;
        margin: auto;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #chat-box {
        height: 400px;
        width: 100%;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 15px;
        border-radius: 5px;
    }

    .message {
        margin: 10px 0;
        padding: 10px;
        border-radius: 8px;
        max-width: 80%;
    }

    .user-message {
        background-color: #d1e7dd;
        align-self: flex-end;
        text-align: right;
    }

    .bot-message {
        background-color: #f0f0f5;
        align-self: flex-start;
    }

    #user-input {
        padding: 10px;
        font-size: 16px;
        width: calc(100% - 60px);
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    #send-button {
        padding: 10px 15px;
        font-size: 16px;
        margin-left: 10px;
        border: none;
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        cursor: pointer;
    }
</style>
